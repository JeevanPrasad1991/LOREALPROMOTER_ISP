package com.cpm.lorealpromoter;import android.app.Activity;import android.app.AlertDialog;import android.app.Dialog;import android.app.ProgressDialog;import android.content.ContentResolver;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.IntentSender;import android.content.SharedPreferences;import android.content.pm.PackageManager;import android.content.pm.PackageManager.NameNotFoundException;import android.location.Location;import android.location.LocationListener;import android.location.LocationManager;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.os.AsyncTask;import android.os.Build;import android.os.Bundle;import android.os.CountDownTimer;import android.os.Environment;import android.preference.PreferenceManager;import android.provider.Settings;import android.support.annotation.NonNull;import android.support.design.widget.Snackbar;import android.support.v4.app.ActivityCompat;import android.util.Log;import android.view.View;import android.view.View.OnClickListener;import android.view.Window;import android.widget.Button;import android.widget.EditText;import android.widget.RadioButton;import android.widget.RadioGroup;import android.widget.TextView;import android.widget.Toast;import com.cpm.Constants.CommonString;import com.cpm.Get_IMEI_number.ImeiNumberClass;import com.cpm.autoupdate.AutoupdateActivity;import com.cpm.database.GSKDatabase;import com.cpm.delegates.TableBean;import com.cpm.message.AlertMessage;import com.cpm.xmlGetterSetter.FailureGetterSetter;import com.cpm.xmlGetterSetter.FocusPerformanceGetterSetter;import com.cpm.xmlGetterSetter.JcpTypeGetterSetter;import com.cpm.xmlGetterSetter.LoginGetterSetter;import com.cpm.xmlGetterSetter.NoticeurlGetterSetter;import com.cpm.xmlGetterSetter.QuestionGetterSetter;import com.cpm.xmlGetterSetter.TodayQuestionGetterSetter;import com.cpm.xmlHandler.XMLHandlers;import com.crashlytics.android.Crashlytics;import com.google.android.gms.common.ConnectionResult;import com.google.android.gms.common.api.GoogleApiClient;import com.google.android.gms.common.api.PendingResult;import com.google.android.gms.common.api.ResultCallback;import com.google.android.gms.common.api.Status;import com.google.android.gms.location.LocationRequest;import com.google.android.gms.location.LocationServices;import com.google.android.gms.location.LocationSettingsRequest;import com.google.android.gms.location.LocationSettingsResult;import com.google.android.gms.location.LocationSettingsStatusCodes;import com.google.firebase.analytics.FirebaseAnalytics;import org.ksoap2.SoapEnvelope;import org.ksoap2.serialization.SoapObject;import org.ksoap2.serialization.SoapSerializationEnvelope;import org.ksoap2.transport.HttpTransportSE;import org.xmlpull.v1.XmlPullParser;import org.xmlpull.v1.XmlPullParserException;import org.xmlpull.v1.XmlPullParserFactory;import java.io.File;import java.io.IOException;import java.io.StringReader;import java.net.MalformedURLException;import java.util.Calendar;import java.util.List;import io.fabric.sdk.android.Fabric;import android.Manifest;public class LoginActivity extends Activity implements OnClickListener, LocationListener {    private EditText mUsername, mPassword;    private Button mLogin;    private String username, password, p_username, p_password;    private double latitude = 0.0, longitude = 0.0;    private int versionCode;    private boolean isChecked;    private LocationManager locmanager = null;    private SharedPreferences preferences = null;    private SharedPreferences.Editor editor = null;    private Intent intent = null;    GSKDatabase database;    static int counter = 1;    String app_ver, version_name;    int eventType;    LoginGetterSetter lgs = null;    String qns_cd, ans_cd;    TextView tv_version;    private QuestionGetterSetter questionGetterSetter;    JcpTypeGetterSetter jcpTypeGetterSetter;    String right_answer, rigth_answer_cd = "";    String store_right_ans;    private FirebaseAnalytics mFirebaseAnalytics;    private GoogleApiClient googleApiClient;    private static final int REQUEST_LOCATION = 1;    private String manufacturer;    private String model;    private String os_version;    private ImeiNumberClass imei;    String[] imeiNumbers;    String imei1 = "", imei2 = "";    private static final int PERMISSIONS_REQUEST_READ_PHONE_STATE = 999;    NoticeurlGetterSetter noticeurlGetterSetter;    Dialog dialog;    private EditText focus_target, store_target, answer;    private Button ok;    FocusPerformanceGetterSetter focusperformanceGetterSetter;    String str_store_target = "", str_focus_target = "";    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.main);        ContentResolver.setMasterSyncAutomatically(false);        // Obtain the FirebaseAnalytics instance.        mFirebaseAnalytics = FirebaseAnalytics.getInstance(this);        Fabric.with(this, new Crashlytics());        checkgpsEnableDevice();        mUsername = (EditText) findViewById(R.id.login_usertextbox);        mPassword = (EditText) findViewById(R.id.login_locktextbox);        tv_version = (TextView) findViewById(R.id.tv_version);   //     mUsername.setText("varsha.b");       /* mUsername.setText("testmer");        mPassword.setText("cpm123");*/        mLogin = (Button) findViewById(R.id.login_loginbtn);        preferences = PreferenceManager.getDefaultSharedPreferences(this);        editor = preferences.edit();        p_username = preferences.getString(CommonString.KEY_USERNAME, null);        p_password = preferences.getString(CommonString.KEY_PASSWORD, null);        isChecked = preferences.getBoolean(CommonString.KEY_REMEMBER, false);        getDeviceName();        try {            app_ver = String.valueOf(getPackageManager().getPackageInfo(getPackageName(), 0).versionCode);            version_name = String.valueOf(getPackageManager().getPackageInfo(getPackageName(), 0).versionName);            tv_version.setText("Version " + version_name + "");        } catch (NameNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        database = new GSKDatabase(this);        if (!isChecked) {        } else {          /*  mUsername.setText(p_username);           mPassword.setText(p_password);*/        }        mLogin.setOnClickListener(this);        locmanager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);        boolean enabled = locmanager.isProviderEnabled(LocationManager.GPS_PROVIDER);        // Create a Folder for Images        File file = new File(Environment.getExternalStorageDirectory(), ".LorealPromoter_Image");        if (!file.isDirectory()) {            file.mkdir();        }        //get IMI number        imei = new ImeiNumberClass(this);        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.READ_PHONE_STATE) != PackageManager.PERMISSION_GRANTED) {            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.READ_PHONE_STATE}, PERMISSIONS_REQUEST_READ_PHONE_STATE);        } else {            imeiNumbers = imei.getDeviceImei();            if (imeiNumbers.length == 2) {                imei1 = imeiNumbers[0];                imei2 = imeiNumbers[1];            } else {                imei1 = imeiNumbers[0];                imei2 = "";            }        }    }    @Override    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {        if (requestCode == PERMISSIONS_REQUEST_READ_PHONE_STATE                && grantResults[0] == PackageManager.PERMISSION_GRANTED) {            imeiNumbers = imei.getDeviceImei();        }    }    @Override    protected void onResume() {        // TODO Auto-generated method stub        super.onResume();        checkgpsEnableDevice();    }    @Override    protected void onDestroy() {        // TODO Auto-generated method stub        super.onDestroy();    }    @Override    public void onClick(View v) {        // TODO Auto-generated method stub        username = mUsername.getText().toString().trim().replaceFirst("^0+(?!$)", "");        password = mPassword.getText().toString().trim().replaceFirst("^0+(?!$)", "");        switch (v.getId()) {            case R.id.login_loginbtn:                if (username.length() == 0) {                    showToast("Please enter username");                } else if (password.length() == 0) {                    showToast("Please enter password");                } else {                    p_username = preferences.getString(CommonString.KEY_USERNAME, null);                    p_password = preferences.getString(CommonString.KEY_PASSWORD, null);                    // If no preferences are stored                    if (p_username == null && p_password == null) {                        if (CheckNetAvailability()) {                            new AuthenticateTask().execute();                        } else {                            showToast("No Network. Please try after Some time");                        }                    }                    // If preferences are stored                    else {                        if (username.equalsIgnoreCase(p_username)) {                            if (CheckNetAvailability()) {                                new AuthenticateTask().execute();                            } else if (password.equals(p_password)) {                               /* intent = new Intent(this, MainMenuActivity.class);                                startActivity(intent);                                this.finish();*/                                showToast("No Network. Please try after Some time");                                // showToast("No Network and offline login");                            } else {                                showToast("Incorrect Password");                            }                        } else {                            showToast("Incorrect Username");                        }                    }                }                break;        }    }    private class AuthenticateTask extends AsyncTask<Void, Void, String> {        private ProgressDialog dialog = null;        @Override        protected void onPreExecute() {            super.onPreExecute();            dialog = new ProgressDialog(LoginActivity.this);            dialog.setTitle("Login");            dialog.setMessage("Authenticating....");            dialog.setCancelable(false);            dialog.show();        }        @Override        protected String doInBackground(Void... params) {            try {                String resultHttp = "";                versionCode = getPackageManager().getPackageInfo(getPackageName(), 0).versionCode;                String userauth_xml =                        "[DATA]"                                + "[USER_DATA]"                                + "[USER_ID]" + username + "[/USER_ID]"                                + "[Password]" + password + "[/Password]"                                + "[IN_TIME]" + getCurrentTime() + "[/IN_TIME]"                                + "[LATITUDE]" + latitude + "[/LATITUDE]"                                + "[LONGITUDE]" + longitude + "[/LONGITUDE]"                                + "[APP_VERSION]" + app_ver + "[/APP_VERSION]"                                + "[ATT_MODE]OnLine[/ATT_MODE]"                                + "[IMEI1]" + imei1 + "[/IMEI1]"                                + "[IMEI2]" + imei2 + "[/IMEI2]"                                + "[Model]" + model + "[/Model]"                                + "[Manufacturer]" + manufacturer + "[/Manufacturer]"                                + "[Andoid_Version]" + os_version + "[/Andoid_Version]"                                + "[/USER_DATA]"                                + "[/DATA]";                SoapObject request = new SoapObject(CommonString.NAMESPACE, CommonString.METHOD_LOGIN);                request.addProperty("onXML", userauth_xml);                SoapSerializationEnvelope envelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);                envelope.dotNet = true;                envelope.setOutputSoapObject(request);                HttpTransportSE androidHttpTransport = new HttpTransportSE(CommonString.URL);                androidHttpTransport.call(CommonString.SOAP_ACTION_LOGIN, envelope);                Object result = (Object) envelope.getResponse();                if (result.toString().equalsIgnoreCase(CommonString.KEY_FAILURE)) {                    final AlertMessage message = new AlertMessage(LoginActivity.this, AlertMessage.MESSAGE_FAILURE, "login", null);                    runOnUiThread(new Runnable() {                        @Override                        public void run() {                            // TODO Auto-generated method stub                            message.showMessage();                        }                    });                } else if (result.toString().equalsIgnoreCase(CommonString.KEY_FALSE)) {                    final AlertMessage message = new AlertMessage(LoginActivity.this, AlertMessage.MESSAGE_FALSE, "login", null);                    runOnUiThread(new Runnable() {                        @Override                        public void run() {                            // TODO Auto-generated method stub                            message.showMessage();                        }                    });                }                //Fail                else if (result.toString().equalsIgnoreCase(CommonString.KEY_FAIL)) {                    final AlertMessage message = new AlertMessage(LoginActivity.this, AlertMessage.MESSAGE_NOT_ALLOWED_LOGIN, "login", null);                    runOnUiThread(new Runnable() {                        @Override                        public void run() {                            // TODO Auto-generated method stub                            message.showMessage();                        }                    });                } else if (result.toString().equalsIgnoreCase(CommonString.KEY_CHANGED)) {                    final AlertMessage message = new AlertMessage(LoginActivity.this, AlertMessage.MESSAGE_CHANGED, "login", null);                    runOnUiThread(new Runnable() {                        @Override                        public void run() {                            // TODO Auto-generated method stub                            message.showMessage();                        }                    });                } else {                    XmlPullParserFactory factory = XmlPullParserFactory.newInstance();                    factory.setNamespaceAware(true);                    XmlPullParser xpp = factory.newPullParser();                    xpp.setInput(new StringReader(result.toString()));                    xpp.next();                    eventType = xpp.getEventType();                    FailureGetterSetter failureGetterSetter = XMLHandlers.failureXMLHandler(xpp, eventType);                    if (failureGetterSetter.getStatus().equalsIgnoreCase(CommonString.KEY_FAILURE)) {                        final AlertMessage message = new AlertMessage(LoginActivity.this,                                CommonString.METHOD_LOGIN + failureGetterSetter.getErrorMsg(), "login", null);                        runOnUiThread(new Runnable() {                            @Override                            public void run() {                                // TODO Auto-generated method stub                                message.showMessage();                            }                        });                    } else {                        try {                            // For String source                            xpp.setInput(new StringReader(result.toString()));                            xpp.next();                            eventType = xpp.getEventType();                            lgs = XMLHandlers.loginXMLHandler(xpp, eventType);                        } catch (XmlPullParserException e) {                            e.printStackTrace();                        } catch (IOException e) {                            e.printStackTrace();                        }                        Crashlytics.setUserIdentifier(username);                        // PUT IN PREFERENCES                        editor.putString(CommonString.KEY_USERNAME, username);                        editor.putString(CommonString.KEY_PASSWORD, password);                        editor.putString(CommonString.KEY_VERSION, lgs.getVERSION());                        editor.putString(CommonString.KEY_PATH, lgs.getPATH());                        //editor.putString(CommonString.KEY_DATE, "03/05/2018");                        editor.putString(CommonString.KEY_DATE, lgs.getDATE());                        editor.putString(CommonString.KEY_USER_TYPE, lgs.getRIGHTNAME());                        editor.commit();                        Bundle bundle = new Bundle();                        bundle.putString(FirebaseAnalytics.Param.ITEM_ID, username);                        bundle.putString(FirebaseAnalytics.Param.ITEM_NAME, "Login Data");                        bundle.putString(FirebaseAnalytics.Param.CONTENT_TYPE, "Data");                        mFirebaseAnalytics.logEvent(FirebaseAnalytics.Event.SELECT_CONTENT, bundle);                        // return CommonString.KEY_SUCCESS;                    }                    //Question download  TODAY_QUESTION                    request = new SoapObject(CommonString.NAMESPACE, CommonString.METHOD_NAME_UNIVERSAL_DOWNLOAD);                    request.addProperty("UserName", username);                    request.addProperty("Type", "TODAY_QUESTION");                    envelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);                    envelope.dotNet = true;                    envelope.setOutputSoapObject(request);                    androidHttpTransport = new HttpTransportSE(CommonString.URL);                    androidHttpTransport.call(CommonString.SOAP_ACTION_UNIVERSAL, envelope);                    result = (Object) envelope.getResponse();                    if (result.toString() != null) {                        xpp.setInput(new StringReader(result.toString()));                        xpp.next();                        eventType = xpp.getEventType();                        questionGetterSetter = XMLHandlers.QuestionXMLHandler(xpp, eventType);                        if (questionGetterSetter.getQuestion_cd().size() > 0) {                            resultHttp = CommonString.KEY_SUCCESS;                            String qnsTable = questionGetterSetter.getTable_question_today();                            TableBean.setQuestiontable(qnsTable);                        } else {                            return CommonString.KEY_SUCCESS;                        }                    }                    //Noticeboard download                    request = new SoapObject(CommonString.NAMESPACE, CommonString.METHOD_NAME_UNIVERSAL_DOWNLOAD);                    request.addProperty("UserName", username);                    request.addProperty("Type", "NOTICE_URL");                    envelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);                    envelope.dotNet = true;                    envelope.setOutputSoapObject(request);                    androidHttpTransport = new HttpTransportSE(CommonString.URL);                    androidHttpTransport.call(CommonString.SOAP_ACTION_UNIVERSAL, envelope);                    Object result_jcp = (Object) envelope.getResponse();                    if (result_jcp.toString() != null) {                        xpp.setInput(new StringReader(result_jcp.toString()));                        xpp.next();                        eventType = xpp.getEventType();                        noticeurlGetterSetter = XMLHandlers.NoticeUrlXMLHandler(xpp, eventType);                        if (noticeurlGetterSetter.getNOTICE_URL().size() > 0) {                            editor = preferences.edit();                            editor.putString(CommonString.KEY_notice_board, noticeurlGetterSetter.getNOTICE_URL().get(0));                            editor.putString(CommonString.KEY_quiz_url, noticeurlGetterSetter.getQUIZ_URL().get(0));                            editor.commit();                            resultHttp = CommonString.KEY_SUCCESS;                        } else {                            resultHttp = CommonString.KEY_SUCCESS;                        }                    }                    //STORE_FOCUS_SKU_PERFORMANCE  data                    request = new SoapObject(CommonString.NAMESPACE, CommonString.METHOD_NAME_UNIVERSAL_DOWNLOAD);                    request.addProperty("UserName", username);                    request.addProperty("Type", "STORE_FOCUS_SKU_PERFORMANCE");                    envelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);                    envelope.dotNet = true;                    envelope.setOutputSoapObject(request);                    androidHttpTransport = new HttpTransportSE(CommonString.URL);                    androidHttpTransport.call(CommonString.SOAP_ACTION_UNIVERSAL, envelope);                    Object focusperformanceMaster = (Object) envelope.getResponse();                    if (focusperformanceMaster.toString() != null) {                        xpp.setInput(new StringReader(focusperformanceMaster.toString()));                        xpp.next();                        eventType = xpp.getEventType();                        focusperformanceGetterSetter = XMLHandlers.focusperformanceXML(xpp, eventType);                        String focusperformanceTable = focusperformanceGetterSetter.getFocusperformance_table();                        TableBean.setFocusperformancetable(focusperformanceTable);                        if (focusperformanceGetterSetter.getSTORE_CD().size() > 0) {                            resultHttp = CommonString.KEY_SUCCESS;                        } else {                            return CommonString.KEY_SUCCESS;                        }                    }                    return resultHttp;                }                return "";            } catch (MalformedURLException e) {                final AlertMessage message = new AlertMessage(LoginActivity.this,                        AlertMessage.MESSAGE_EXCEPTION, "acra_login", e);                runOnUiThread(new Runnable() {                    @Override                    public void run() {                        // TODO Auto-generated method stub                        message.showMessage();                    }                });            } catch (IOException e) {                final AlertMessage message = new AlertMessage(                        LoginActivity.this,                        AlertMessage.MESSAGE_SOCKETEXCEPTION, "socket_login", e);                counter++;                runOnUiThread(new Runnable() {                    @Override                    public void run() {                        // TODO Auto-generated method stub                        if (counter < 3) {                            new AuthenticateTask().execute();                        } else {                            message.showMessage();                            counter = 1;                        }                    }                });            } catch (Exception e) {                Crashlytics.logException(e);                final AlertMessage message = new AlertMessage(                        LoginActivity.this, AlertMessage.MESSAGE_EXCEPTION,                        "acra_login", e);                runOnUiThread(new Runnable() {                    @Override                    public void run() {                        // TODO Auto-generated method stub                        message.showMessage();                    }                });            }            return "";        }        @Override        protected void onPostExecute(String result) {            // TODO Auto-generated method stub            super.onPostExecute(result);            dialog.dismiss();            if (result.equals(CommonString.KEY_SUCCESS)) {                if (preferences.getString(CommonString.KEY_VERSION, "").equals(Integer.toString(versionCode))) {                    String visit_date = preferences.getString(CommonString.KEY_DATE, "");                    if (questionGetterSetter.getAnswer_cd().size() > 0 && questionGetterSetter.getStatus().get(0).equals("N") &&                            !preferences.getBoolean(CommonString.KEY_IS_QUIZ_DONE + visit_date, false)) {                        for (int i = 0; i < questionGetterSetter.getRight_answer().size(); i++) {                            if (questionGetterSetter.getRight_answer().get(i).equals("1")) {                                right_answer = questionGetterSetter.getAnswer().get(i);                                rigth_answer_cd = questionGetterSetter.getAnswer_cd().get(i);                                break;                            }                        }                        final AnswerData answerData = new AnswerData();                        final Dialog customD = new Dialog(LoginActivity.this);                        customD.setTitle("Todays Question");                        customD.setCancelable(false);                        customD.setContentView(R.layout.show_answer_layout);                        customD.setContentView(R.layout.todays_question_layout);                        ((TextView) customD.findViewById(R.id.tv_qns)).setText(questionGetterSetter.getQuestion().get(0));                        Button btnsubmit = (Button) customD.findViewById(R.id.btnsubmit);                        final TextView txt_timer = (TextView) customD.findViewById(R.id.txt_timer);                        RadioGroup radioGroup = (RadioGroup) customD.findViewById(R.id.radiogrp);                        new CountDownTimer(60000, 1000) {                            public void onTick(long millisUntilFinished) {                                txt_timer.setText("seconds remaining: " + millisUntilFinished / 1000);                                //here you can have your logic to set text to edittext                            }                            public void onFinish() {                                if (answerData.getAnswer_id() == null || answerData.getAnswer_id().equals("")) {                                    txt_timer.setText("done!");                                    customD.cancel();                                    String ansisright = "";                                    ansisright = "Your Time is over";                                    final Dialog ans_dialog = new Dialog(LoginActivity.this);                                    ans_dialog.setTitle("Answer");                                    ans_dialog.setCancelable(false);                                    ans_dialog.setContentView(R.layout.show_answer_layout);                                    ((TextView) ans_dialog.findViewById(R.id.tv_ans)).setText(ansisright);                                    Button btnok = (Button) ans_dialog.findViewById(R.id.btnsubmit);                                    btnok.setOnClickListener(new OnClickListener() {                                        @Override                                        public void onClick(View v) {                                            answerData.setQuestion_id(questionGetterSetter.getQuestion_cd().get(0));                                            answerData.setUsername(username);                                            answerData.setVisit_date(lgs.getDATE());                                            if (CheckNetAvailability()) {                                                ans_dialog.cancel();                                                new AnswerTodayTask().execute(answerData);                                            } else {                                                showToast("No internet connection");                                            }                                        }                                    });                                    ans_dialog.show();                                }                            }                        }.start();                        for (int i = 0; i < questionGetterSetter.getAnswer_cd().size(); i++) {                            RadioButton rdbtn = new RadioButton(LoginActivity.this);                            rdbtn.setId(i);                            rdbtn.setText(questionGetterSetter.getAnswer().get(i));                            radioGroup.addView(rdbtn);                        }                        radioGroup.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {                            @Override                            public void onCheckedChanged(RadioGroup group, int checkedId) {                                answerData.setAnswer_id(questionGetterSetter.getAnswer_cd().get(checkedId));                                answerData.setRight_answer(questionGetterSetter.getRight_answer().get(checkedId));                            }                        });                        btnsubmit.setOnClickListener(new View.OnClickListener() {                            @Override                            public void onClick(View v) {                                if (answerData.getAnswer_id() == null || answerData.getAnswer_id().equals("")) {                                    Snackbar.make(mLogin, "First select an answer", Snackbar.LENGTH_SHORT).show();                                } else {                                    customD.cancel();                                    String ansisright = "";                                    if (answerData.getRight_answer().equals("1")) {                                        ansisright = "Your Answer Is Right!";                                    } else {                                        ansisright = "Your Answer is Wrong! Right Answer Is :- " + right_answer;                                    }                                    final Dialog ans_dialog = new Dialog(LoginActivity.this);                                    ans_dialog.setTitle("Answer");                                    ans_dialog.setCancelable(false);                                    ans_dialog.setContentView(R.layout.show_answer_layout);                                    ((TextView) ans_dialog.findViewById(R.id.tv_ans)).setText(ansisright);                                    Button btnok = (Button) ans_dialog.findViewById(R.id.btnsubmit);                                    btnok.setOnClickListener(new OnClickListener() {                                        @Override                                        public void onClick(View v) {                                            answerData.setQuestion_id(questionGetterSetter.getQuestion_cd().get(0));                                            answerData.setUsername(username);                                            answerData.setVisit_date(lgs.getDATE());                                            if (CheckNetAvailability()) {                                                new AnswerTodayTask().execute(answerData);                                                ans_dialog.cancel();                                            } else {                                                showToast("No internet connection");                                            }                                        }                                    });                                    ans_dialog.show();                                }                            }                        });                        customD.show();                    } else if ((focusperformanceGetterSetter.getSTORE_CD().size() > 0 && focusperformanceGetterSetter.getSHOW_TARGET().get(0).equals("1")) && focusperformanceGetterSetter.getSTATUS().get(0).equals("N")) {                        popup();                    } else {                        intent = new Intent(getBaseContext(), MainMenuActivity.class);                        startActivity(intent);                        finish();                    }                } else {                    intent = new Intent(getBaseContext(), AutoupdateActivity.class);                    intent.putExtra(CommonString.KEY_PATH, preferences.getString(CommonString.KEY_PATH, ""));                    startActivity(intent);                    finish();                }            }        }    }    public boolean CheckNetAvailability() {        boolean connected = false;        ConnectivityManager connectivityManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);        if (connectivityManager.getNetworkInfo(ConnectivityManager.TYPE_MOBILE)                .getState() == NetworkInfo.State.CONNECTED                || connectivityManager.getNetworkInfo(                ConnectivityManager.TYPE_WIFI).getState() == NetworkInfo.State.CONNECTED) {            // we are connected to a network            connected = true;        }        return connected;    }    private void showToast(String message) {        Toast.makeText(getBaseContext(), message, Toast.LENGTH_LONG).show();    }    // for location    @Override    public void onLocationChanged(Location location) {        // TODO Auto-generated method stub        latitude = location.getLatitude();        longitude = location.getLongitude();    }    @Override    public void onProviderDisabled(String arg0) {        // TODO Auto-generated method stub    }    @Override    public void onProviderEnabled(String arg0) {        // TODO Auto-generated method stub    }    @Override    public void onStatusChanged(String arg0, int arg1, Bundle arg2) {        // TODO Auto-generated method stub    }    public void onButtonClick(View v) {        Intent startMain = new Intent(Intent.ACTION_MAIN);        startMain.addCategory(Intent.CATEGORY_HOME);        startMain.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);        startActivity(startMain);    }    public String getCurrentTime() {        Calendar m_cal = Calendar.getInstance();        String intime = m_cal.get(Calendar.HOUR_OF_DAY) + ":" + m_cal.get(Calendar.MINUTE) + ":" + m_cal.get(Calendar.SECOND);        return intime;    }    @Override    public void onBackPressed() {        // TODO Auto-generated method stub      /*  Intent startMain = new Intent(Intent.ACTION_MAIN);        startMain.addCategory(Intent.CATEGORY_HOME);        startMain.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);        startActivity(startMain);*/    }    class AnswerData {        public String question_id, answer_id, username, visit_date, right_answer;        public String fill_store_target = "", fill_focus_target = "", store_result, focu_result;        private String actual_store_target, actual_focus_target;        public String getActual_store_target() {            return actual_store_target;        }        public void setActual_store_target(String actual_store_target) {            this.actual_store_target = actual_store_target;        }        public String getActual_focus_target() {            return actual_focus_target;        }        public void setActual_focus_target(String actual_focus_target) {            this.actual_focus_target = actual_focus_target;        }        public String getFill_store_target() {            return fill_store_target;        }        public void setFill_store_target(String fill_store_target) {            this.fill_store_target = fill_store_target;        }        public String getFill_focus_target() {            return fill_focus_target;        }        public void setFill_focus_target(String fill_focus_target) {            this.fill_focus_target = fill_focus_target;        }        public String getStore_result() {            return store_result;        }        public void setStore_result(String store_result) {            this.store_result = store_result;        }        public String getFocu_result() {            return focu_result;        }        public void setFocu_result(String focu_result) {            this.focu_result = focu_result;        }        public String getQuestion_id() {            return question_id;        }        public void setQuestion_id(String question_id) {            this.question_id = question_id;        }        public String getAnswer_id() {            return answer_id;        }        public void setAnswer_id(String answer_id) {            this.answer_id = answer_id;        }        public String getUsername() {            return username;        }        public void setUsername(String username) {            this.username = username;        }        public String getVisit_date() {            return visit_date;        }        public void setVisit_date(String visit_date) {            this.visit_date = visit_date;        }        public String getRight_answer() {            return right_answer;        }        public void setRight_answer(String right_answer) {            this.right_answer = right_answer;        }    }    class AnswerTodayTask extends AsyncTask<AnswerData, Void, String> {        private ProgressDialog dialog = null;        @Override        protected void onPreExecute() {            super.onPreExecute();            dialog = new ProgressDialog(LoginActivity.this);            dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);            dialog.setTitle("Todays Question");            dialog.setMessage("Submitting Answer..");            dialog.setCancelable(false);            dialog.show();        }        @Override        protected String doInBackground(AnswerData... params) {            try {                AnswerData answerData = params[0];                if (answerData.getAnswer_id() == null) {                    answerData.setAnswer_id("0");                }                String resultHttp = "";                versionCode = getPackageManager().getPackageInfo(getPackageName(), 0).versionCode;                qns_cd = answerData.getQuestion_id();                ans_cd = answerData.getAnswer_id();                String userauth_xml = "[DATA]" + "[TODAY_ANSWER][USER_ID]"                        + answerData.getUsername() + "[/USER_ID]" + "[QUESTION_ID]" + answerData.getQuestion_id()                        + "[/QUESTION_ID]" + "[ANSWER_ID]" + answerData.getAnswer_id()                        + "[/ANSWER_ID]" + "[VISIT_DATE]" + answerData.getVisit_date()                        + "[/VISIT_DATE]"                        + "[/TODAY_ANSWER][/DATA]";                SoapObject request = new SoapObject(CommonString.NAMESPACE, CommonString.METHOD_UPLOAD_XML);                request.addProperty("XMLDATA", userauth_xml);                request.addProperty("KEYS", "TODAYS_ANSWER");                request.addProperty("USERNAME", answerData.getUsername());                SoapSerializationEnvelope envelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);                envelope.dotNet = true;                envelope.setOutputSoapObject(request);                HttpTransportSE androidHttpTransport = new HttpTransportSE(CommonString.URL);                androidHttpTransport.call(CommonString.SOAP_ACTION + CommonString.METHOD_UPLOAD_XML, envelope);                Object result = (Object) envelope.getResponse();                if (result.toString().equalsIgnoreCase(CommonString.KEY_FAILURE)) {                } else if (result.toString().equalsIgnoreCase(CommonString.KEY_FALSE)) {                } else {                    String visit_date = preferences.getString(CommonString.KEY_DATE, null);                    editor = preferences.edit();                    editor.putBoolean(CommonString.KEY_IS_QUIZ_DONE + visit_date, true);                    editor.commit();                    return CommonString.KEY_SUCCESS;                }                return "";            } catch (MalformedURLException e) {                final AlertMessage message = new AlertMessage(                        LoginActivity.this, AlertMessage.MESSAGE_EXCEPTION,                        "acra_login", e);                runOnUiThread(new Runnable() {                    @Override                    public void run() {                        // TODO Auto-generated method stub                        message.showMessage();                    }                });            } catch (IOException e) {                final AlertMessage message = new AlertMessage(                        LoginActivity.this,                        AlertMessage.MESSAGE_SOCKETEXCEPTION, "socket_login", e);                counter++;                runOnUiThread(new Runnable() {                    @Override                    public void run() {                        // TODO Auto-generated method stub                        if (counter < 3) {                            new AuthenticateTask().execute();                        } else {                            message.showMessage();                            counter = 1;                        }                    }                });            } catch (Exception e) {                Crashlytics.logException(e);                final AlertMessage message = new AlertMessage(                        LoginActivity.this, AlertMessage.MESSAGE_EXCEPTION,                        "acra_login", e);                runOnUiThread(new Runnable() {                    @Override                    public void run() {                        // TODO Auto-generated method stub                        message.showMessage();                    }                });            }            return null;        }        @Override        protected void onPostExecute(String result) {            dialog.dismiss();            super.onPostExecute(result);            if (result.equals(CommonString.KEY_SUCCESS)) {                if (focusperformanceGetterSetter.getSTORE_CD().size() > 0 && focusperformanceGetterSetter.getSHOW_TARGET().get(0).equals("1")) {                    popup();                } else {                    intent = new Intent(getBaseContext(), MainMenuActivity.class);                    startActivity(intent);                    finish();                }            } else {                //Save question cd and ans cd here for upload                String visit_date = preferences.getString(CommonString.KEY_DATE, null);                editor = preferences.edit();                editor.putString(CommonString.KEY_QUESTION_CD + visit_date, qns_cd);                editor.putString(CommonString.KEY_ANSWER_CD + visit_date, ans_cd);                editor.commit();                intent = new Intent(getBaseContext(), MainMenuActivity.class);                startActivity(intent);                finish();            }        }    }    private boolean checkgpsEnableDevice() {        boolean flag = true;        if (!hasGPSDevice(LoginActivity.this)) {            Toast.makeText(LoginActivity.this, "Gps not Supported", Toast.LENGTH_SHORT).show();        }        final LocationManager manager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);        if (!manager.isProviderEnabled(LocationManager.GPS_PROVIDER) && hasGPSDevice(LoginActivity.this)) {            enableLoc();            flag = false;        } else if (manager.isProviderEnabled(LocationManager.GPS_PROVIDER) && hasGPSDevice(LoginActivity.this)) {            flag = true;        }        return flag;    }    private boolean hasGPSDevice(Context context) {        final LocationManager mgr = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);        if (mgr == null)            return false;        final List<String> providers = mgr.getAllProviders();        if (providers == null)            return false;        return providers.contains(LocationManager.GPS_PROVIDER);    }    private void enableLoc() {        if (googleApiClient == null) {            googleApiClient = new GoogleApiClient.Builder(this)                    .addApi(LocationServices.API)                    .addConnectionCallbacks(new GoogleApiClient.ConnectionCallbacks() {                        @Override                        public void onConnected(Bundle bundle) {                            Location mLastLocation = LocationServices.FusedLocationApi.getLastLocation(googleApiClient);                            if (mLastLocation != null) {                               /* lat = String.valueOf(mLastLocation.getLatitude());                                lon = String.valueOf(mLastLocation.getLongitude());*/                                latitude = mLastLocation.getLatitude();                                longitude = mLastLocation.getLongitude();                            }                        }                        @Override                        public void onConnectionSuspended(int i) {                            googleApiClient.connect();                        }                    })                    .addOnConnectionFailedListener(new GoogleApiClient.OnConnectionFailedListener() {                        @Override                        public void onConnectionFailed(ConnectionResult connectionResult) {                            Log.d("Location error", "Location error " + connectionResult.getErrorCode());                        }                    }).build();            googleApiClient.connect();            LocationRequest locationRequest = LocationRequest.create();            locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);            locationRequest.setInterval(30 * 1000);            locationRequest.setFastestInterval(5 * 1000);            LocationSettingsRequest.Builder builder = new LocationSettingsRequest.Builder()                    .addLocationRequest(locationRequest);            builder.setAlwaysShow(true);            PendingResult<LocationSettingsResult> result =                    LocationServices.SettingsApi.checkLocationSettings(googleApiClient, builder.build());            result.setResultCallback(new ResultCallback<LocationSettingsResult>() {                @Override                public void onResult(LocationSettingsResult result) {                    final Status status = result.getStatus();                    switch (status.getStatusCode()) {                        case LocationSettingsStatusCodes.RESOLUTION_REQUIRED:                            try {                                // Show the dialog by calling startResolutionForResult(),                                // and check the result in onActivityResult().                                status.startResolutionForResult(LoginActivity.this, REQUEST_LOCATION);                            } catch (IntentSender.SendIntentException e) {                                // Ignore the error.                            }                            break;                    }                }            });        }    }    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        switch (requestCode) {            case REQUEST_LOCATION:                switch (resultCode) {                    case Activity.RESULT_CANCELED: {                        finish();                    }                    default: {                        break;                    }                }                break;        }    }    public void getDeviceName() {        manufacturer = Build.MANUFACTURER;        model = Build.MODEL;        os_version = android.os.Build.VERSION.RELEASE;    }    private void popup() {        final AnswerData ans = new AnswerData();        dialog = new Dialog(LoginActivity.this);        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);        dialog.setContentView(R.layout.dialog_total_targate);        store_target = (EditText) dialog.findViewById(R.id.store_target);        focus_target = (EditText) dialog.findViewById(R.id.focus_sku);        ok = (Button) dialog.findViewById(R.id.ok);        dialog.setCancelable(false);        dialog.setCanceledOnTouchOutside(false);        ok.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (validation()) {                    dialog.cancel();                    ans.setFill_store_target(store_target.getText().toString());                    ans.setFill_focus_target(focus_target.getText().toString());                    String ansisright = "";                    String store_targ = focusperformanceGetterSetter.getALL_TARGET().get(0);                    String focus_targ = focusperformanceGetterSetter.getFOCUS_TARGET().get(0);                    if (ans.getFill_store_target().equals(store_targ) && ans.getFill_focus_target().equals(focus_targ)) {                        ansisright = "Your Answer Is Right!";                        ans.setStore_result("1");                        ans.setFocu_result("1");                    } else {                        ans.setStore_result("0");                        ans.setFocu_result("0");                        ansisright = "Your Answer is Wrong!" + "\n" + "Right Answer Is :-  " + "\n" + "Store Target- " + store_targ + "\n" + "Focus Target- " + focus_targ;                    }                    final Dialog store_ans_dialog = new Dialog(LoginActivity.this);                    store_ans_dialog.setTitle("Answer");                    store_ans_dialog.setCancelable(false);                    store_ans_dialog.setContentView(R.layout.store_show_answer_layout);                    ((TextView) store_ans_dialog.findViewById(R.id.tv_ans)).setText(ansisright);                    Button btnok = (Button) store_ans_dialog.findViewById(R.id.btnsubmit);                    btnok.setOnClickListener(new OnClickListener() {                        @Override                        public void onClick(View v) {                            ans.setActual_store_target(focusperformanceGetterSetter.getALL_TARGET().get(0));                            ans.setActual_focus_target(focusperformanceGetterSetter.getFOCUS_TARGET().get(0));                            ans.setUsername(username);                            ans.setVisit_date(lgs.getDATE());                            if (CheckNetAvailability()) {                                store_ans_dialog.cancel();                                new storetargetTask().execute(ans);                            } else {                                showToast("No internet connection");                            }                        }                    });                    store_ans_dialog.show();                }              /*  intent = new Intent(getBaseContext(), MainMenuActivity.class);                startActivity(intent);                finish();*/                //  dialog.dismiss();            }        });        dialog.show();    }    //store target    class storetargetTask extends AsyncTask<AnswerData, Void, String> {        private ProgressDialog dialog = null;        @Override        protected void onPreExecute() {            super.onPreExecute();            dialog = new ProgressDialog(LoginActivity.this);            dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);            dialog.setTitle("Todays Question");            dialog.setMessage("Submitting Answer..");            dialog.setCancelable(false);            dialog.show();        }        @Override        protected String doInBackground(AnswerData... params) {            try {                AnswerData answerData = params[0];                String resultHttp = "";                versionCode = getPackageManager().getPackageInfo(getPackageName(), 0).versionCode;                String userauth_xml = "[DATA]" + "[TODAY_STORE_TARGET_ANSWER][USER_ID]"                        + answerData.getUsername() + "[/USER_ID]"                        + "[STORE_TARGET]" + answerData.getFill_store_target()                        + "[/STORE_TARGET]"                        + "[FOCUS_TARGET]" + answerData.getFill_focus_target()                        + "[/FOCUS_TARGET]"                        + "[ACTUAL_STORE_TARGET]" + answerData.getActual_store_target()                        + "[/ACTUAL_STORE_TARGET]"                        + "[ACTUAL_FOCUS_TARGET]" + answerData.getActual_focus_target()                        + "[/ACTUAL_FOCUS_TARGET]"                        + "[STORE_RESULT]" + answerData.getStore_result()                        + "[/STORE_RESULT]"                        + "[STORE_FOCUS_RESULT]" + answerData.getFocu_result()                        + "[/STORE_FOCUS_RESULT]"                        + "[VISIT_DATE]" + answerData.getVisit_date()                        + "[/VISIT_DATE]"                        + "[/TODAY_STORE_TARGET_ANSWER][/DATA]";                SoapObject request = new SoapObject(CommonString.NAMESPACE, CommonString.METHOD_UPLOAD_XML);                request.addProperty("XMLDATA", userauth_xml);                request.addProperty("KEYS", "TODAY_STORE_TARGET_ANSWER");                request.addProperty("USERNAME", answerData.getUsername());                SoapSerializationEnvelope envelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);                envelope.dotNet = true;                envelope.setOutputSoapObject(request);                HttpTransportSE androidHttpTransport = new HttpTransportSE(CommonString.URL);                androidHttpTransport.call(CommonString.SOAP_ACTION + CommonString.METHOD_UPLOAD_XML, envelope);                Object result = (Object) envelope.getResponse();                if (result.toString().equalsIgnoreCase(CommonString.KEY_FAILURE)) {                } else if (result.toString().equalsIgnoreCase(CommonString.KEY_FALSE)) {                } else {                    String visit_date = preferences.getString(CommonString.KEY_DATE, null);                   /* editor = preferences.edit();                    editor.putBoolean(CommonString.KEY_IS_QUIZ_DONE + visit_date, true);                    editor.commit();*/                    return CommonString.KEY_SUCCESS;                }                return "";            } catch (MalformedURLException e) {                final AlertMessage message = new AlertMessage(                        LoginActivity.this, AlertMessage.MESSAGE_EXCEPTION,                        "acra_login", e);                runOnUiThread(new Runnable() {                    @Override                    public void run() {                        // TODO Auto-generated method stub                        message.showMessage();                    }                });            } catch (IOException e) {                final AlertMessage message = new AlertMessage(                        LoginActivity.this,                        AlertMessage.MESSAGE_SOCKETEXCEPTION, "socket_login", e);                counter++;                runOnUiThread(new Runnable() {                    @Override                    public void run() {                        // TODO Auto-generated method stub                        if (counter < 3) {                            new AuthenticateTask().execute();                        } else {                            message.showMessage();                            counter = 1;                        }                    }                });            } catch (Exception e) {                Crashlytics.logException(e);                final AlertMessage message = new AlertMessage(                        LoginActivity.this, AlertMessage.MESSAGE_EXCEPTION,                        "acra_login", e);                runOnUiThread(new Runnable() {                    @Override                    public void run() {                        // TODO Auto-generated method stub                        message.showMessage();                    }                });            }            return null;        }        @Override        protected void onPostExecute(String result) {            dialog.dismiss();            super.onPostExecute(result);            if (result.equals(CommonString.KEY_SUCCESS)) {                intent = new Intent(getBaseContext(), MainMenuActivity.class);                startActivity(intent);                finish();            } else {                //Save question cd and ans cd here for upload                String visit_date = preferences.getString(CommonString.KEY_DATE, null);                editor = preferences.edit();                editor.putString(CommonString.KEY_QUESTION_CD + visit_date, qns_cd);                editor.putString(CommonString.KEY_ANSWER_CD + visit_date, ans_cd);                editor.commit();                intent = new Intent(getBaseContext(), MainMenuActivity.class);                startActivity(intent);                finish();            }        }    }    public boolean validation() {        str_store_target = store_target.getText().toString().replaceAll("[&^<>{}'$]", " ");        str_focus_target = focus_target.getText().toString().replaceAll("[&^<>{}'$]", " ");        boolean value = true;        if (store_target.getText().toString().replaceAll("[(!@#$%^&*?%')<>\"]", " ").trim().equalsIgnoreCase("")) {            value = false;            showMessage("Please fill Store Target");        } else if (focus_target.getText().toString().toString().replaceAll("[(!@#$%^&*?%')<>\"]", " ").trim().equalsIgnoreCase("")) {            value = false;            showMessage("Please fill Focus Target");        } else {            value = true;        }        return value;    }    public void showMessage(String message) {        Snackbar.make(ok, message, Snackbar.LENGTH_SHORT).show();    }}